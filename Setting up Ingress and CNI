BULLET POINTS:
1. ITS A SERVICE USED TO EXPOSE APP
2. IT EXPOSE APP BASED ON URL
3. IT SUPPORTS ENCRYPTION AND SSL REDIRECTION
4. TO DISTRIBUTE TRAFFIC EFFICIENTLY WE CAN USE INGRESS
5. BY DEFAULT THIS IS NOT INSTALLED ON CLUSTER WE NEED TO INSTALL.

INGRESS IN K8S:
Ingress helps to expose the HTTP and HTTPS routes from outside of the cluster.
Ingress supports
Path-based  
Host-based routing
Ingress supports Load balancing and SSL termination.
It redirects the incoming requests to the right services based on the Web URL or path in the address.
Ingress provides the encryption feature and helps to balance the load of the applications.

Ingress is used to manage the external traffic to the services within the cluster which provides features like host-based routing, path-based routing, SSL termination, and more. Where a Load balancer is used to manage the traffic but the load balancer does not provide the fine-grained access control like Ingress.

Example:
Suppose you have multiple Kubernetes services running on your cluster and each service serves a different application such as example.com/app1 and example.com/app2. With the help of Ingress, you can achieve this. However, the Load Balancer routes the traffic based on the ports and can't handle the URL-based routing.

To install ingress, firstly we have to install nginx ingress controller:
command: kubectl create -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.2.1/deploy/static/provider/cloud/deploy.yaml


Once we install ingress controller, we have to deploy 2 applications.
yum install git -y

github url: git clone https://github.com/RAHAMSHAIK007/ingress.git
kubectl create -f .

After executing all the files, use kubectl get ing to get ingress. After 30 seconds it will provide one load balancer dns.

access those applications using dns/nginx and dns/httpd. So the traffic will route into both the applications as per the routing


In Kubernetes (K8s), CNI stands for Container Network Interface. It's a specification and a set of plugins used to configure network interfaces in Linux containers. The CNI is essential for Kubernetes networking, as it allows pods to communicate with each other and with external networks.

Key Points About CNI in Kubernetes:
What it does:

Assigns IP addresses to pods.
Connects pod networks to the host and other pods.
Manages routing and network policies.


Popular CNI Plugins:

Calico
Flannel
Weave
Cilium
Canal
Romana


CNI configuration files are usually found in /etc/cni/net.d/
Plugin binaries are in /opt/cni/bin/
