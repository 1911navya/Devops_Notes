TOOLS:
GIT
GITHUB
JENKINS
MAVEN
K8S
DOCKER
DOCKERHUB
EKS
PROMETHEUS
GRAFANA
SLACK


Step 1: Setting Up Your EC2 UBUNTU Instance [t2.large, 30 ebs, Iam full access]
Step 2: Install AWS CLI, kubectl, and eksctl

apt update
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip&quot; -o "awscliv2.zip"
sudo apt install unzip
unzip awscliv2.zip
sudo ./aws/install

curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/kubectl
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin
kubectl version --short --client


curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
sudo mv /tmp/eksctl /usr/local/bin
eksctl version

STEP-3: CONFIGURE CREDS OF IAM USER

aws configure

STEP-4: CREATE CLUSTER

eksctl create cluster --name=EKS-raham1 --region=us-east-1 --zones=us-east-1a,us-east-1b --without-nodegroup

eksctl utils associate-iam-oidc-provider --region us-east-1 --cluster EKS-raham1 --approve

eksctl create nodegroup --cluster=EKS-raham1 --region=us-east-1 --name=node2 --node-type=t2.medium --nodes=3 --nodes-min=2 --nodes-max=4 --node-volume-size=20 --ssh-access --ssh-public-key=schedule --managed --asg-access --external-dns-access --full-ecr-access --appmesh-access --alb-ingress-access

STELP-5: INSTALL JENKINS & DOCKER

sudo apt install openjdk-17-jre-headless -y
sudo wget -O /usr/share/keyrings/jenkins-keyring.asc https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/" | sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update
sudo apt-get install jenkins -y
systemctl status jenkins.service

sudo apt install docker.io -y
sudo chmod 777 /var/run/docker.sock


STEP-6: DOWNLOAD PLUGINS
DOCKER
DOCKER PIPELINE
KUBERNETES
KUBERNETES CLI
PIPELINE STAGE VIEW

Dashboard
Manage Jenkins
Tools
Docker installations
Name: docker
Install automatically
Download from docker.com    
Docker version: latest


STEP-7: ADD CREDS FOR DOCKERHUB, GITHUB
Dashboard
Manage Jenkins
Credentials
System
Global credentials (unrestricted)
username: rahamshaik
password: ********
id: docker-cred

Global credentials (unrestricted)
user: devopsbyraham
Password: token

Note: in github passwords are not accepted we need to use token

profile -- > settings -- > developer settings -- > Personal access token -- > classic -- >
generate new token -- > classic -- > name: paytm -- > select 6 scopes -- > generate



STEP-8: CREATE SERVICE ACCOUNT, ROLE, ROLE BIND FOR webapps namespace
NOTE: For ever namespace we get a default service account
without default service accounts we cant work

vim namespace.yml

apiVersion: v1
kind: Namespace
metadata:
  name: webapps
 
vim svc-acc.yml

apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins
  namespace: webapps


vim role.yml

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: app-role
  namespace: webapps
rules:
  - apiGroups:
        - "*"
    resources:
      - pods
      - componentstatuses
      - configmaps
      - daemonsets
      - deployments
      - events
      - endpoints
      - horizontalpodautoscalers
      - ingress
      - jobs
      - limitranges
      - namespaces
      - nodes
      - pods
      - persistentvolumes
      - persistentvolumeclaims
      - resourcequotas
      - replicasets
      - replicationcontrollers
      - serviceaccounts
      - services
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: app-rolebinding
  namespace: webapps
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: app-role
subjects:
- namespace: webapps
  kind: ServiceAccount
  name: jenkins


Generate token using service account in the namespace:

apiVersion: v1
kind: Secret
type: kubernetes.io/service-account-token
metadata:
  name: mysecretname
  namespace: webapps
  annotations:
    kubernetes.io/service-account.name: jenkins

kubectl describe secret mysecretname -n webapps



STEP-9: ADD TOKEN TO CREDS (THIS TOKEN WILL GIVE ACCESS TO SA CALLED JENKINS)
Dashboard
Manage Jenkins
Credentials
System
Global credentials (unrestricted)
kind: secret text
secret: ************************
id: k8s-token

STEP-10: CHANGE THE DOCKERHUB ID IN ALL SERVICES AND TOKEN & END POINT IN MAIN BRANCH

REPO: https://github.com/devopsbyraham/microservices-project.git

NOTE: USE MULTI BRANCH PIPELINE FOR THIS PROJECT
Branch Sources: GITHUB: https://github.com/devopsbyraham/microservices-project.git
Discover branches : all

SAVE

kubectl get svc -n webapps

Access the Application From Load balancer DNS

eksctl delete nodegroup --cluster EKS-raham1 --name node2


JENKINS FILE:
A Jenkinsfile is a text file
It contains  of a Jenkins pipeline code.
used to automate stages like building, testing, and deploying code.
It's written using a Groovy-based DSL (Domain Specific Language) and checked into your source control repository (like GitHub) along with your source code.

There are two types of Jenkinsfile syntax:
Declarative Pipeline (simpler and structured)
Scripted Pipeline (more flexible, uses Groovy scripting)
